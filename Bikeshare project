import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, 
        (str) day - name of the day of week to filter by, 
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
        city= input('Would you like to see some data from chicago,new york city, or washington? :').lower()
        if city not in CITY_DATA:
            print('Invalid response please try again.')
        else:
            break
    
    

    # TO DO: get user input for month (all, january, february, ... , june)
    while True:
        month =input('Which month from january to june would you like to see? :').lower()
        months = ['january', 'february', 'march' , 'april' , 'may' , 'june']
        if  month not in months:
            print('Invalid response please try again.')
        else:
            break
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    while True:
        day = input('Which day of the week would you like to see?: ').lower()
        days = ['sunday','monday', 'tuesday','wednesday','thursday','friday','saturday']
        if day not in days:
            print('Invalid response please try again.')
        else:
            break
                    
    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, 
        (str) day - name of the day of week to filter by,
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    if month is :
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) +1 or 'full'
        df = df[df['month']==month]
 
    if day is :
        df = df[df['day_of_week'] == day.title()]
    
    return df
def view_data(df):
    """
    display data 5 rows at a time until no longer wanted
    Args:
    df - Pandas DataFrame containing city data filtered by month and day from Load_Data Function 
    """
    i = 0
    answer = input('would you like to see the first five rows of data? please answer yes or no: ').lower()
    pd.set_option('display.max_columns',None)
    while True:
        if answer == 'no':
            break
        print(df[i:i+5])
        answer = input('would you like to see another five rows of data? please answer yes or no: ').lower()
        i += 5
def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()
    
    
    # TO DO: display the most common month
    common_month = df['month'].mode()[0]
    print('The most common month is: ',common_month)
    # TO DO: display the most common day of week

    common_dotw = df['day_of_week'].mode()[0]
    print('The most common day of the week is: ', common_dotw)
    # TO DO: display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    common_hour = df['hour'].mode()[0]
    print('The most common hour is : ' , common_hour)                    
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    common_start_station = df['Start Station'].mode()[0]
    print('The most common start station was: ', common_start_station)                    

    # TO DO: display most commonly used end station
    common_end_station = df['End Station'].mode()[0]
    print('The most common end station was: ',common_end_station)
    # TO DO: display most frequent combination of start station and end station trip
    trip_stations = (df['End Station'] + ' - ' + df['Start Station']).mode()[0] 
    print('The most common combination of start and end stations is : ',trip_stations)
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    total_travel_time = df['Trip Duration'].sum()
    print('The total travel time is: ', total_travel_time) 
    # TO DO: display mean travel time
    mean_travel_time = df['Trip Duration'].mean()
    print('The average travel time is: ', mean_travel_time)
    print("\nThis took %s seconds." % (time.time() - start_time))
    print( '-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    user_types = df['User Type'].value_counts()
    print(user_types)
    # TO DO: Display counts of gender
    
    if 'Gender' in df:
        print(df['Gender'].value_counts())
    else:
        print('Unfortunatley there is no data available for Genders in this Data Frame.')

    # TO DO: Display earliest, most recent, and most common year of birth
    if 'Birth Year' in df:
              earliest_by = int(df['Birth Year'].min())
              print('\n The earliest  birth year is - ',earliest_by)
              recent_by = int(df['Birth Year'].max())
              print('\n The most recent birth year is - ',recent_by)
              common_by = int(df['Birth Year'].mode()[0])
              print('\n The most common birth year is -' , common_by)
              
              print("\nThis took %s seconds." % (time.time() - start_time))
              print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        
        view_data(df)
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
